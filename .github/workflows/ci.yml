name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run linter
      working-directory: ./backend
      run: npm run lint
    
    - name: Run tests
      working-directory: ./backend
      run: npm test
    
    - name: Build
      working-directory: ./backend
      run: npm run build

  ml-service-test:
    name: ML Service Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: ml-service/requirements*.txt
    
    - name: Install dependencies
      working-directory: ./ml-service
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run tests
      working-directory: ./ml-service
      run: pytest

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linter
      working-directory: ./frontend
      run: npm run lint
    
    - name: Build
      working-directory: ./frontend
      run: npm run build

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, ml-service-test, frontend-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker images
      run: docker compose build
    
    - name: Start services
      run: docker compose up -d
    
    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
    
    - name: Check backend health
      run: |
        response=$(curl -s http://localhost:3000/health)
        echo "Backend health: $response"
        if [[ $response != *'"status":"ok"'* ]]; then
          echo "Backend health check failed"
          exit 1
        fi
    
    - name: Check ML service health
      run: |
        response=$(curl -s http://localhost:8000/health)
        echo "ML service health: $response"
        if [[ $response != *'"status":"ok"'* ]]; then
          echo "ML service health check failed"
          exit 1
        fi
    
    - name: Stop services
      run: docker compose down
